import capos.*

describe "Parte 1" {
  test "Rolando" {
    
    rolando.agregarArtefacto(espadaDelDestino)
    rolando.agregarArtefacto(libroDeHechizos)

    assert.throwsException({rolando.agregarArtefacto(collarDivino)})

    assert.equals(#{espadaDelDestino, libroDeHechizos}, rolando.artefactosEnMochila())

  }

  test "Castillo de piedra" {
    
    rolando.encontrarArtefacto(espadaDelDestino)
    rolando.encontrarArtefacto(libroDeHechizos)
    rolando.irHaciaHogar()

    assert.equals(#{espadaDelDestino,libroDeHechizos}, castilloDePiedra.artefactos())

    rolando.encontrarArtefacto(collarDivino)
    rolando.irHaciaHogar()

    assert.equals(#{espadaDelDestino,libroDeHechizos,collarDivino}, castilloDePiedra.artefactos())

  }

  test "Saber que artefactos tiene Rolando" {
    
    castilloDePiedra.añadirVariosItems(#{collarDivino, espadaDelDestino})
    rolando.agregarArtefacto(armaduraDeAceroValyrio)

    assert.equals(#{collarDivino, espadaDelDestino, armaduraDeAceroValyrio}, rolando.posesiones())

  }

  test "Historial de artefactos" {
    
    rolando.encontrarArtefacto(espadaDelDestino)
    rolando.encontrarArtefacto(libroDeHechizos)
    rolando.encontrarArtefacto(collarDivino)

    rolando.irHaciaHogar()

    rolando.encontrarArtefacto(armaduraDeAceroValyrio)
    rolando.encontrarArtefacto(collarDivino)

    assert.equals([espadaDelDestino,libroDeHechizos,collarDivino,armaduraDeAceroValyrio,collarDivino], rolando.artefactosEncontrados())

  }

}

describe "Parte 2" {

  method initialize() {
    rolando.poderBase(5)
    rolando.tamañoMochila(3)
    rolando.agregarArtefacto(espadaDelDestino)
    rolando.agregarArtefacto(armaduraDeAceroValyrio)
    rolando.agregarArtefacto(collarDivino)

  }

  test "Comportamiento de los artefactos" {
    
    assert.equals(5, rolando.poderBase())
    assert.equals(5, espadaDelDestino.poderJuntoA(rolando))
    assert.equals(6, armaduraDeAceroValyrio.poderJuntoA(rolando))
    assert.equals(3, collarDivino.poderJuntoA(rolando))

    rolando.vaABatalla()

    assert.equals(6, rolando.poderBase())
    assert.equals(3, espadaDelDestino.poderJuntoA(rolando))
    assert.equals(6, armaduraDeAceroValyrio.poderJuntoA(rolando))
    assert.equals(3, collarDivino.poderJuntoA(rolando))

    rolando.vaABatalla()

    assert.equals(7, rolando.poderBase())
    assert.equals(3.5, espadaDelDestino.poderJuntoA(rolando))
    assert.equals(6, armaduraDeAceroValyrio.poderJuntoA(rolando))
    assert.equals(5, collarDivino.poderJuntoA(rolando))

    rolando.vaABatalla()

    assert.equals(8, rolando.poderBase())
    assert.equals(4, espadaDelDestino.poderJuntoA(rolando))
    assert.equals(6, armaduraDeAceroValyrio.poderJuntoA(rolando))
    assert.equals(6, collarDivino.poderJuntoA(rolando))
  }
  
  test "Poder Total de rolando" {
    
    assert.equals(19, rolando.poderTotal())
  }

  test "Libro de Hechizos" {
    
    rolando.irHaciaHogar()

    rolando.agregarArtefacto(libroDeHechizos)

    assert.equals(4, libroDeHechizos.poderJuntoA(rolando))
    
    rolando.vaABatalla()

    assert.equals(6, libroDeHechizos.poderJuntoA(rolando))

    rolando.vaABatalla()

    assert.equals(7, libroDeHechizos.poderJuntoA(rolando))

    rolando.vaABatalla()

    assert.equals(0, libroDeHechizos.poderJuntoA(rolando))
  }

  test "Enemigos" {
    
    assert.that(rolando.puedeVencerA(archibaldo))
    rolando.pelearContra(archibaldo)
    assert.that(rolando.puedeVencerA(astra))
    rolando.pelearContra(astra)
    
    assert.equals([palacioDeMarmol, torreDeMarfil], rolando.moradasConquistadas())

  }

  test "Poderoso" {
    
    assert.notThat(rolando.esPoderosoEn(erethia))
    rolando.poderBase(10)
    assert.that(rolando.esPoderosoEn(erethia))

  }

  test "Artefacto Letal" {

    rolando.poderBase(15)
    assert.that(rolando.tieneArtefactoFatal(astra))
    assert.equals(espadaDelDestino, rolando.artefactoFatal(astra))

    assert.notThat(rolando.tieneArtefactoFatal(caterina))
  }
}


  